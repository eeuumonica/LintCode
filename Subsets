/*
	Given a set of distinct integers, return all possible subsets.
	Elements in a subset must be in non-descending order.
	The solution set must not contain duplicate subsets.
	*/
public class Subsets {
	
	/**
     * @param S: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */

	public ArrayList<ArrayList<Integer>> subsets(int[] nums) {
		ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
		if (nums == null || nums.length == 0) {
			return result;
		}
		ArrayList<Integer> list = new ArrayList<Integer>();
		//time complexity, NlogN
		Arrays.sort(nums);
		helper(result, list, nums, 0);
		return result;
	}

	private void helper(ArrayList<ArrayList<Integer>> result, 
						ArrayList<Integer> list,
						int[] nums,
						int position) {
		//deep copy
		//first list to be added is a null list
		result.add(new ArrayList<Integer>(list));

		for (int i = position; i < nums.length; i++) {
			list.add(nums[i]);
			helper(result, list, nums, i + 1);
			list.remove(list.size() - 1);
		}
	}
}
